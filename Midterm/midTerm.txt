unsigned int nTrials = 2;
  unsigned int num;
  unsigned long sum;

  while(nTrials){

    printf("number is: ");
    fflush(stdout);
    scanf("%u", &num);

    sum = 0;
    while(num){
      sum += num%10;
      num/=10;
    }

    printf("sum = %lu\n", sum);
    fflush(stdout);
    --nTrials;
  }
///////////////////////////////////////////////////
/*
 ============================================================================
 Name        : Assignments.c
 Author      : Omar Anwer
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>

void flush(void);

int reverseDigits(int num){
  int reversed = 0;
  while(num)
  {
    reversed = (reversed * 10) + (num % 10);
    num /= 10;
  }
  return (reversed);
}

int main(void)
{
  unsigned int nTrials = 2;

  while(nTrials){
    printf("input is: ");
    fflush(stdout);
    int num;
    scanf("%u", &num);

    printf("output = %u\n", reverseDigits(num));
    fflush(stdout);
    --nTrials;
  }

  return 0;
}


void flush(void){
  fflush(stdin);
  fflush(stdout);
}
///////////////////////////////////////////////
/*
 ============================================================================
 Name        : Assignments.c
 Author      : Omar Anwer
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>

void flush(void);

int isPrime(unsigned int n){
  if(n == 2)          return 1;
  if(n < 2 || !(n&1)) return 0;
  unsigned int i;
  for(i = 3; i*i <= n; i+=2){
    if(n % i == 0)
      return 0;
  }
  return 1;
}

/*Note !!! 1 is not prime ^_^ */
void printPrime(unsigned int start, unsigned int end){
  unsigned int i;
  for(i = start; i <= end; ++i){
    if( isPrime(i) )
      printf("%u ", i);
  }
  printf("\n");
}

int main(void){

  printPrime(1, 20);

  return 0;
}


void flush(void){
  fflush(stdin);
  fflush(stdout);
}
/////////////////////////////////////////////////////////
/*
 ============================================================================
 Name        : Assignments.c
 Author      : Omar Anwer
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>

void flush(void);

unsigned int countOnes(unsigned int num)
{
  unsigned int cnt = 0;
  while(num){
    if(num & 1){
      cnt++;
    }
    num = num >> 1;
  }
  return (cnt);
}

int main(void){
  unsigned int nTrials = 2;
  while(nTrials){
    printf("input is: ");
    fflush(stdout);
    int num;
    scanf("%u", &num);

    printf("output = %u\n", countOnes(num));
    fflush(stdout);
    --nTrials;
  }
  return 0;
}


void flush(void){
  fflush(stdin);
  fflush(stdout);
}
////////////////////////////////////////////
/*
 ============================================================================
 Name        : Assignments.c
 Author      : Omar Anwer
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>

void flush(void);

double squareRoot(double num)
{
  /*by iterating this equation we will have a precise value of the square root*/
  double square = num;
  int i;
  for(i = 0; i < 20; ++i)
  {
    square = 0.5 * (square + num/square);
  }
  return (square);
}

int main(void){

  printf("input is: 4\n");
  fflush(stdout);
  printf("output is: %lf\n", squareRoot(4));
  fflush(stdout);

  printf("input is: 10\n");
    fflush(stdout);
    printf("output is: %lf\n", squareRoot(10));
    fflush(stdout);


  return 0;
}


void flush(void){
  fflush(stdin);
  fflush(stdout);
}
//////////////////////////////////////////////////////